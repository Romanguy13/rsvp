/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { RSVP, RSVPInterface } from "../RSVP";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "eventId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "eventOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "eventTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxCapacity",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "eventDataCID",
        type: "string",
      },
    ],
    name: "NewEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_eventTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_deposit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxCapacity",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_eventDataCID",
        type: "string",
      },
    ],
    name: "createNewEvent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "idToEvent",
    outputs: [
      {
        internalType: "bytes32",
        name: "eventId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "eventDataCID",
        type: "string",
      },
      {
        internalType: "address",
        name: "eventOwner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "eventTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxCapacity",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "paidOut",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f5b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c806292098c1461003a578063909ef02114610056575b600080fd5b610054600480360381019061004f9190610651565b61008c565b005b610070600480360381019061006b919061070f565b61040e565b6040516100839796959493929190610846565b60405180910390f35b600033308787876040516020016100a7959493929190610925565b604051602081830303815290604052805190602001209050606080600073ffffffffffffffffffffffffffffffffffffffff1660008085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d906109d0565b60405180910390fd5b600087116101a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a090610a3c565b60405180910390fd5b600086116101ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e390610ace565b60405180910390fd5b6064861115610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022790610b60565b60405180910390fd5b60405180610120016040528084815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013373ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152602001878152602001838152602001828152602001600015158152506000808581526020019081526020016000206000820151816000015560208201518160010190816102fe9190610dbb565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006019080519060200190610380929190610505565b5060e082015181600701908051906020019061039d929190610505565b506101008201518160080160006101000a81548160ff021916908315150217905550905050827f7695f1cdf7913dbfed02ce179da8ce166adeeb3c6165a008c1b15ea4c75fcb74338a8a8a8a8a6040516103fc96959493929190610ec9565b60405180910390a25050505050505050565b600060205280600052604060002060009150905080600001549080600101805461043790610bde565b80601f016020809104026020016040519081016040528092919081815260200182805461046390610bde565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060080160009054906101000a900460ff16905087565b82805482825590600052602060002090810192821561057e579160200282015b8281111561057d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610525565b5b50905061058b919061058f565b5090565b5b808211156105a8576000816000905550600101610590565b5090565b600080fd5b600080fd5b6000819050919050565b6105c9816105b6565b81146105d457600080fd5b50565b6000813590506105e6816105c0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610611576106106105ec565b5b8235905067ffffffffffffffff81111561062e5761062d6105f1565b5b60208301915083600182028301111561064a576106496105f6565b5b9250929050565b60008060008060006080868803121561066d5761066c6105ac565b5b600061067b888289016105d7565b955050602061068c888289016105d7565b945050604061069d888289016105d7565b935050606086013567ffffffffffffffff8111156106be576106bd6105b1565b5b6106ca888289016105fb565b92509250509295509295909350565b6000819050919050565b6106ec816106d9565b81146106f757600080fd5b50565b600081359050610709816106e3565b92915050565b600060208284031215610725576107246105ac565b5b6000610733848285016106fa565b91505092915050565b610745816106d9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078557808201518184015260208101905061076a565b60008484015250505050565b6000601f19601f8301169050919050565b60006107ad8261074b565b6107b78185610756565b93506107c7818560208601610767565b6107d081610791565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610806826107db565b9050919050565b610816816107fb565b82525050565b610825816105b6565b82525050565b60008115159050919050565b6108408161082b565b82525050565b600060e08201905061085b600083018a61073c565b818103602083015261086d81896107a2565b905061087c604083018861080d565b610889606083018761081c565b610896608083018661081c565b6108a360a083018561081c565b6108b060c0830184610837565b98975050505050505050565b60008160601b9050919050565b60006108d4826108bc565b9050919050565b60006108e6826108c9565b9050919050565b6108fe6108f9826107fb565b6108db565b82525050565b6000819050919050565b61091f61091a826105b6565b610904565b82525050565b600061093182886108ed565b60148201915061094182876108ed565b601482019150610951828661090e565b602082019150610961828561090e565b602082019150610971828461090e565b6020820191508190509695505050505050565b7f4576656e7420616c726561647920657869737473000000000000000000000000600082015250565b60006109ba601483610756565b91506109c582610984565b602082019050919050565b600060208201905081810360008301526109e9816109ad565b9050919050565b7f4465706f736974206d7573742062652067726561746572207468616e20300000600082015250565b6000610a26601e83610756565b9150610a31826109f0565b602082019050919050565b60006020820190508181036000830152610a5581610a19565b9050919050565b7f4d6178206361706163697479206d75737420626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b6000610ab8602383610756565b9150610ac382610a5c565b604082019050919050565b60006020820190508181036000830152610ae781610aab565b9050919050565b7f4d6178206361706163697479206d757374206265206c657373207468616e206f60008201527f7220657175616c20746f20313030000000000000000000000000000000000000602082015250565b6000610b4a602e83610756565b9150610b5582610aee565b604082019050919050565b60006020820190508181036000830152610b7981610b3d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bf657607f821691505b602082108103610c0957610c08610baf565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610c717fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c34565b610c7b8683610c34565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610cb8610cb3610cae846105b6565b610c93565b6105b6565b9050919050565b6000819050919050565b610cd283610c9d565b610ce6610cde82610cbf565b848454610c41565b825550505050565b600090565b610cfb610cee565b610d06818484610cc9565b505050565b5b81811015610d2a57610d1f600082610cf3565b600181019050610d0c565b5050565b601f821115610d6f57610d4081610c0f565b610d4984610c24565b81016020851015610d58578190505b610d6c610d6485610c24565b830182610d0b565b50505b505050565b600082821c905092915050565b6000610d9260001984600802610d74565b1980831691505092915050565b6000610dab8383610d81565b9150826002028217905092915050565b610dc48261074b565b67ffffffffffffffff811115610ddd57610ddc610b80565b5b610de78254610bde565b610df2828285610d2e565b600060209050601f831160018114610e255760008415610e13578287015190505b610e1d8582610d9f565b865550610e85565b601f198416610e3386610c0f565b60005b82811015610e5b57848901518255600182019150602085019450602081019050610e36565b86831015610e785784890151610e74601f891682610d81565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b6000610ea88385610756565b9350610eb5838584610e8d565b610ebe83610791565b840190509392505050565b600060a082019050610ede600083018961080d565b610eeb602083018861081c565b610ef8604083018761081c565b610f05606083018661081c565b8181036080830152610f18818486610e9c565b905097965050505050505056fea2646970667358221220a58f0bfeea8387f2b0d5865ddec829fe5a4e321824bedd89187ebf925d3b127b64736f6c63430008120033";

type RSVPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RSVPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RSVP__factory extends ContractFactory {
  constructor(...args: RSVPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RSVP> {
    return super.deploy(overrides || {}) as Promise<RSVP>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RSVP {
    return super.attach(address) as RSVP;
  }
  override connect(signer: Signer): RSVP__factory {
    return super.connect(signer) as RSVP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RSVPInterface {
    return new utils.Interface(_abi) as RSVPInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RSVP {
    return new Contract(address, _abi, signerOrProvider) as RSVP;
  }
}
